{"ast":null,"code":"import React,{useState}from\"react\";import s from\"./SuperEditableSpan.module.css\";import SuperInputText from\"../../../hw04/common/c1-SuperInputText/SuperInputText\";import editIcon from\"./editIcon.svg\";// тип пропсов обычного инпута\n// тип пропсов обычного спана\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута, кроме type\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const SuperEditableSpan=_ref=>{let{autoFocus,onBlur,onEnter,spanProps,...restProps// все остальные пропсы попадут в объект restProps\n}=_ref;const[editMode,setEditMode]=useState(false);const{children,onDoubleClick,className,defaultText,...restSpanProps}=spanProps||{};// useEffect(() => {\n//     setLocalValue(restProps.value || \"\");\n//   }, [restProps.value]);\n// const [localValue, setLocalValue] = useState(restProps.value || \"\");\nconst onEnterCallback=()=>{// выключить editMode при нажатии Enter // делают студенты\nonEnter===null||onEnter===void 0?void 0:onEnter();setEditMode(false);};const onBlurCallback=e=>{// выключить editMode при нажатии за пределами инпута // делают студенты\nonBlur===null||onBlur===void 0?void 0:onBlur(e);setEditMode(false);// restProps.onChangeText?.(restProps.value as string || \"hello\") ;\n};const onDoubleClickCallBack=e=>{var _restProps$onChangeTe;// включить editMode при двойном клике // делают студенты\nonDoubleClick===null||onDoubleClick===void 0?void 0:onDoubleClick(e);setEditMode(true);(_restProps$onChangeTe=restProps.onChangeText)===null||_restProps$onChangeTe===void 0?void 0:_restProps$onChangeTe.call(restProps,\"hello\");/// это setValue\n};const spanClassName=s.span+(className?\" \"+className:\"\");return/*#__PURE__*/_jsx(_Fragment,{children:editMode?/*#__PURE__*/_jsx(SuperInputText,{autoFocus:autoFocus||true,onBlur:onBlurCallback,onEnter:onEnterCallback,className:s.input//   value={restProps.value}\n,...restProps}):/*#__PURE__*/_jsxs(\"div\",{className:s.spanBlock,children:[/*#__PURE__*/_jsx(\"img\",{src:editIcon,className:s.pen,alt:\"edit\"}),/*#__PURE__*/_jsx(\"span\",{onDoubleClick:onDoubleClickCallBack,className:spanClassName,...restSpanProps,children:children||restProps.value||defaultText})]})});};export default SuperEditableSpan;","map":{"version":3,"names":["React","useState","s","SuperInputText","editIcon","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","SuperEditableSpan","_ref","autoFocus","onBlur","onEnter","spanProps","restProps","editMode","setEditMode","children","onDoubleClick","className","defaultText","restSpanProps","onEnterCallback","onBlurCallback","e","onDoubleClickCallBack","_restProps$onChangeTe","onChangeText","call","spanClassName","span","input","spanBlock","src","pen","alt","value"],"sources":["/Users/anatolisaukhin/hw-02/src/s2-homeworks/hw06/common/c4-SuperEditableSpan/SuperEditableSpan.tsx"],"sourcesContent":["import React, {\n  DetailedHTMLProps,\n  InputHTMLAttributes,\n  HTMLAttributes,\n  useState,\n  KeyboardEvent,\n  useEffect,\n} from \"react\";\nimport s from \"./SuperEditableSpan.module.css\";\nimport SuperInputText from \"../../../hw04/common/c1-SuperInputText/SuperInputText\";\nimport editIcon from \"./editIcon.svg\";\nimport { restoreState, saveState } from \"../../localStorage/localStorage\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<\n  InputHTMLAttributes<HTMLInputElement>,\n  HTMLInputElement\n>;\n// тип пропсов обычного спана\ntype DefaultSpanPropsType = DetailedHTMLProps<\n  HTMLAttributes<HTMLSpanElement>,\n  HTMLSpanElement\n>;\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута, кроме type\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperEditableSpanType = Omit<DefaultInputPropsType, \"type\"> & {\n  // и + ещё пропсы которых нет в стандартном инпуте\n  onChangeText?: (value: string) => void;\n  onEnter?: () => void;\n  error?: string;\n  spanProps?: DefaultSpanPropsType & { defaultText?: string }; // пропсы для спана\n};\n\nconst SuperEditableSpan: React.FC<SuperEditableSpanType> = ({\n  autoFocus,\n  onBlur,\n  onEnter,\n  spanProps,\n  \n  ...restProps // все остальные пропсы попадут в объект restProps\n}) => {\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const { children, onDoubleClick, className, defaultText, ...restSpanProps } =\n    spanProps || {};\n\n\n\n    // useEffect(() => {\n    //     setLocalValue(restProps.value || \"\");\n    //   }, [restProps.value]);\n\n\n    // const [localValue, setLocalValue] = useState(restProps.value || \"\");\n\n\n  const onEnterCallback = () => {\n    // выключить editMode при нажатии Enter // делают студенты\n\n    onEnter?.();\n    setEditMode(false);\n\n\n  };\n  const onBlurCallback = (e: React.FocusEvent<HTMLInputElement>) => {\n    // выключить editMode при нажатии за пределами инпута // делают студенты\n\n    onBlur?.(e);\n    setEditMode(false);\n    // restProps.onChangeText?.(restProps.value as string || \"hello\") ;\n\n  };\n  const onDoubleClickCallBack = (\n    e: React.MouseEvent<HTMLSpanElement, MouseEvent>\n  ) => {\n    // включить editMode при двойном клике // делают студенты\n\n    onDoubleClick?.(e);\n    setEditMode(true);\n    restProps.onChangeText?.(\"hello\")  /// это setValue\n  };\n\n  const spanClassName = s.span + (className ? \" \" + className : \"\");\n\n  return (\n    <>\n      {editMode ? (\n        <SuperInputText\n          autoFocus={autoFocus || true}\n          onBlur={onBlurCallback}\n          onEnter={onEnterCallback}\n          className={s.input}\n        //   value={restProps.value}\n          {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n        />\n      ) : (\n        <div className={s.spanBlock}>\n          <img src={editIcon} className={s.pen} alt={\"edit\"} />\n          <span\n            onDoubleClick={onDoubleClickCallBack}\n            className={spanClassName}\n            {...restSpanProps}\n          >\n            {/*если нет захардкодженного текста для спана, то значение инпута*/}\n\n            {children || restProps.value || defaultText}\n            {/* { restProps.value  ? restProps.value  : defaultText} */}\n            {/* { defaultText  ? defaultText : restProps.value } */}\n          </span>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default SuperEditableSpan;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAIVC,QAAQ,KAGH,OAAO,CACd,MAAO,CAAAC,CAAC,KAAM,gCAAgC,CAC9C,MAAO,CAAAC,cAAc,KAAM,uDAAuD,CAClF,MAAO,CAAAC,QAAQ,KAAM,gBAAgB,CAGrC;AAKA;AAMA;AACA;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBASA,KAAM,CAAAC,iBAAkD,CAAGC,IAAA,EAOrD,IAPsD,CAC1DC,SAAS,CACTC,MAAM,CACNC,OAAO,CACPC,SAAS,CAET,GAAGC,SAAU;AACf,CAAC,CAAAL,IAAA,CACC,KAAM,CAACM,QAAQ,CAAEC,WAAW,CAAC,CAAGlB,QAAQ,CAAU,KAAK,CAAC,CACxD,KAAM,CAAEmB,QAAQ,CAAEC,aAAa,CAAEC,SAAS,CAAEC,WAAW,CAAE,GAAGC,aAAc,CAAC,CACzER,SAAS,EAAI,CAAC,CAAC,CAIf;AACA;AACA;AAGA;AAGF,KAAM,CAAAS,eAAe,CAAGA,CAAA,GAAM,CAC5B;AAEAV,OAAO,SAAPA,OAAO,iBAAPA,OAAO,CAAG,CAAC,CACXI,WAAW,CAAC,KAAK,CAAC,CAGpB,CAAC,CACD,KAAM,CAAAO,cAAc,CAAIC,CAAqC,EAAK,CAChE;AAEAb,MAAM,SAANA,MAAM,iBAANA,MAAM,CAAGa,CAAC,CAAC,CACXR,WAAW,CAAC,KAAK,CAAC,CAClB;AAEF,CAAC,CACD,KAAM,CAAAS,qBAAqB,CACzBD,CAAgD,EAC7C,KAAAE,qBAAA,CACH;AAEAR,aAAa,SAAbA,aAAa,iBAAbA,aAAa,CAAGM,CAAC,CAAC,CAClBR,WAAW,CAAC,IAAI,CAAC,CACjB,CAAAU,qBAAA,CAAAZ,SAAS,CAACa,YAAY,UAAAD,qBAAA,iBAAtBA,qBAAA,CAAAE,IAAA,CAAAd,SAAS,CAAgB,OAAO,CAAC,CAAE;AACrC,CAAC,CAED,KAAM,CAAAe,aAAa,CAAG9B,CAAC,CAAC+B,IAAI,EAAIX,SAAS,CAAG,GAAG,CAAGA,SAAS,CAAG,EAAE,CAAC,CAEjE,mBACEhB,IAAA,CAAAI,SAAA,EAAAU,QAAA,CACGF,QAAQ,cACPZ,IAAA,CAACH,cAAc,EACbU,SAAS,CAAEA,SAAS,EAAI,IAAK,CAC7BC,MAAM,CAAEY,cAAe,CACvBX,OAAO,CAAEU,eAAgB,CACzBH,SAAS,CAAEpB,CAAC,CAACgC,KACf;AAAA,IACMjB,SAAS,CACd,CAAC,cAEFT,KAAA,QAAKc,SAAS,CAAEpB,CAAC,CAACiC,SAAU,CAAAf,QAAA,eAC1Bd,IAAA,QAAK8B,GAAG,CAAEhC,QAAS,CAACkB,SAAS,CAAEpB,CAAC,CAACmC,GAAI,CAACC,GAAG,CAAE,MAAO,CAAE,CAAC,cACrDhC,IAAA,SACEe,aAAa,CAAEO,qBAAsB,CACrCN,SAAS,CAAEU,aAAc,IACrBR,aAAa,CAAAJ,QAAA,CAIhBA,QAAQ,EAAIH,SAAS,CAACsB,KAAK,EAAIhB,WAAW,CAGvC,CAAC,EACJ,CACN,CACD,CAAC,CAEP,CAAC,CAED,cAAe,CAAAZ,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}