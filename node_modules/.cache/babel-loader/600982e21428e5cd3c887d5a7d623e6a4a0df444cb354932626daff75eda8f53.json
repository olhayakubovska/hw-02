{"ast":null,"code":"var _jsxFileName = \"/Users/anatolisaukhin/hw-02/src/s2-homeworks/hw04/common/c1-SuperInputText/SuperInputText.tsx\";\nimport React from 'react';\nimport s from './SuperInputText.module.css';\n\n// тип пропсов обычного инпута\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута, кроме type\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SuperInputText = ({\n  onChange,\n  onChangeText,\n  onKeyPress,\n  onEnter,\n  error,\n  className,\n  spanClassName,\n  id,\n  ...restProps // все остальные пропсы попадут в объект restProps\n}) => {\n  console.log(error, \"error!!!!!!\");\n  const onChangeCallback = e => {\n    onChange === null || onChange === void 0 ? void 0 : onChange(e); // если есть пропс onChange, то передать ему е (поскольку onChange не обязателен)\n\n    onChangeText === null || onChangeText === void 0 ? void 0 : onChangeText(e.currentTarget.value);\n  };\n  const onKeyPressCallback = e => {\n    onKeyPress === null || onKeyPress === void 0 ? void 0 : onKeyPress(e);\n    onEnter &&\n    // если есть пропс onEnter\n    e.key === 'Enter' &&\n    // и если нажата кнопка Enter\n    onEnter(); // то вызвать его\n  };\n  const finalSpanClassName = s.error + (spanClassName ? ' ' + spanClassName : '');\n  const finalInputClassName = s.input + (error ? ' ' + s.errorInput : ' ' + s.superInput) + (className ? ' ' + className : ''); // задача на смешивание классов\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.inputWrapper,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: id,\n      type: 'text',\n      onChange: onChangeCallback,\n      onKeyPress: onKeyPressCallback,\n      className: finalInputClassName,\n      ...restProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      id: id ? id + '-span' : undefined,\n      className: finalSpanClassName,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_c = SuperInputText;\nexport default SuperInputText;\nvar _c;\n$RefreshReg$(_c, \"SuperInputText\");","map":{"version":3,"names":["React","s","jsxDEV","_jsxDEV","SuperInputText","onChange","onChangeText","onKeyPress","onEnter","error","className","spanClassName","id","restProps","console","log","onChangeCallback","e","currentTarget","value","onKeyPressCallback","key","finalSpanClassName","finalInputClassName","input","errorInput","superInput","inputWrapper","children","type","fileName","_jsxFileName","lineNumber","columnNumber","undefined","_c","$RefreshReg$"],"sources":["/Users/anatolisaukhin/hw-02/src/s2-homeworks/hw04/common/c1-SuperInputText/SuperInputText.tsx"],"sourcesContent":["import React, {\n    ChangeEvent,\n    DetailedHTMLProps,\n    InputHTMLAttributes,\n    KeyboardEvent,\n    ReactNode,\n} from 'react'\nimport s from './SuperInputText.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>,\n    HTMLInputElement>\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута, кроме type\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = Omit<DefaultInputPropsType, 'type'> & {\n    // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: ReactNode\n    spanClassName?: string\n}\n\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\n    {\n        onChange,\n        onChangeText,\n        onKeyPress,\n        onEnter,\n        error,\n        className,\n        spanClassName,\n        id,\n\n        ...restProps // все остальные пропсы попадут в объект restProps\n    }\n) => {\n\nconsole.log(error,\"error!!!!!!\")\n\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange?.(e) // если есть пропс onChange, то передать ему е (поскольку onChange не обязателен)\n\n        onChangeText?.(e.currentTarget.value)\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress?.(e)\n\n        onEnter && // если есть пропс onEnter\n        e.key === 'Enter' && // и если нажата кнопка Enter\n        onEnter() // то вызвать его\n    }\n\n    const finalSpanClassName = s.error\n        + (spanClassName ? ' ' + spanClassName : '')\n\n    const finalInputClassName = s.input\n        + (error ? ' ' + s.errorInput : ' ' + s.superInput)\n        + (className ? ' ' + className : '') // задача на смешивание классов\n\n    return (\n        <div className={s.inputWrapper}>\n            <input\n                id={id}\n                type={'text'}\n                onChange={onChangeCallback}\n                onKeyPress={onKeyPressCallback}\n                className={finalInputClassName}\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n            <span\n                id={id ? id + '-span' : undefined}\n                className={finalSpanClassName}\n            >\n                {error}\n            </span>\n        </div>\n    )\n}\n\nexport default SuperInputText\n"],"mappings":";AAAA,OAAOA,KAAK,MAML,OAAO;AACd,OAAOC,CAAC,MAAM,6BAA6B;;AAE3C;;AAIA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AASA,MAAMC,cAAiD,GAAGA,CACtD;EACIC,QAAQ;EACRC,YAAY;EACZC,UAAU;EACVC,OAAO;EACPC,KAAK;EACLC,SAAS;EACTC,aAAa;EACbC,EAAE;EAEF,GAAGC,SAAS,CAAC;AACjB,CAAC,KACA;EAELC,OAAO,CAACC,GAAG,CAACN,KAAK,EAAC,aAAa,CAAC;EAE5B,MAAMO,gBAAgB,GAAIC,CAAgC,IAAK;IAC3DZ,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAGY,CAAC,CAAC,EAAC;;IAEdX,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAGW,CAAC,CAACC,aAAa,CAACC,KAAK,CAAC;EACzC,CAAC;EACD,MAAMC,kBAAkB,GAAIH,CAAkC,IAAK;IAC/DV,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAGU,CAAC,CAAC;IAEfT,OAAO;IAAI;IACXS,CAAC,CAACI,GAAG,KAAK,OAAO;IAAI;IACrBb,OAAO,CAAC,CAAC,EAAC;EACd,CAAC;EAED,MAAMc,kBAAkB,GAAGrB,CAAC,CAACQ,KAAK,IAC3BE,aAAa,GAAG,GAAG,GAAGA,aAAa,GAAG,EAAE,CAAC;EAEhD,MAAMY,mBAAmB,GAAGtB,CAAC,CAACuB,KAAK,IAC5Bf,KAAK,GAAG,GAAG,GAAGR,CAAC,CAACwB,UAAU,GAAG,GAAG,GAAGxB,CAAC,CAACyB,UAAU,CAAC,IAChDhB,SAAS,GAAG,GAAG,GAAGA,SAAS,GAAG,EAAE,CAAC,EAAC;;EAEzC,oBACIP,OAAA;IAAKO,SAAS,EAAET,CAAC,CAAC0B,YAAa;IAAAC,QAAA,gBAC3BzB,OAAA;MACIS,EAAE,EAAEA,EAAG;MACPiB,IAAI,EAAE,MAAO;MACbxB,QAAQ,EAAEW,gBAAiB;MAC3BT,UAAU,EAAEa,kBAAmB;MAC/BV,SAAS,EAAEa,mBAAoB;MAAA,GAC3BV;IAAS;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB,CAAC,eACF9B,OAAA;MACIS,EAAE,EAAEA,EAAE,GAAGA,EAAE,GAAG,OAAO,GAAGsB,SAAU;MAClCxB,SAAS,EAAEY,kBAAmB;MAAAM,QAAA,EAE7BnB;IAAK;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEd,CAAC;AAAAE,EAAA,GAvDK/B,cAAiD;AAyDvD,eAAeA,cAAc;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}