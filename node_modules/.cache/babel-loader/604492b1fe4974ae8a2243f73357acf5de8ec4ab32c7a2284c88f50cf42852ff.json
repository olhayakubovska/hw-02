{"ast":null,"code":"// вот вам функция для сохранения объектов в память браузера\n// (данные в этом хранилище сохраняться даже при перезагрузке компа):\nexport function saveState(key, state) {\n  const stateAsString = JSON.stringify(state);\n  localStorage.setItem(key, stateAsString);\n  return s;\n}\n\n// и вот вам функция для получения сохранённого объекта в памяти браузера:\nexport function restoreState(key, defaultState) {\n  let state = defaultState;\n  // console.log(key,\"key\")\n  const stateAsString = localStorage.getItem(key);\n  if (stateAsString !== null) state = JSON.parse(stateAsString);\n  return state;\n}\n\n// ---------------------------------------------------------------------------------------------------------------\n// пример использования:\n/*\ntype StateType = {\n    x: string\n    y: number\n}\n\n// сохраняем объект типа StateType в ячейке 'test'\nsaveState<StateType>('test', { x: 'A', y: 1 })\n\n// получаем в переменную state объект из ячейки 'test' или дэфолтный объект если ячейка пуста\nconst state: StateType = restoreState<StateType>('test', { x: '', y: 0 })\n */","map":{"version":3,"names":["saveState","key","state","stateAsString","JSON","stringify","localStorage","setItem","s","restoreState","defaultState","getItem","parse"],"sources":["/Users/anatolisaukhin/hw-02/src/s2-homeworks/hw06/localStorage/localStorage.ts"],"sourcesContent":["// вот вам функция для сохранения объектов в память браузера\n// (данные в этом хранилище сохраняться даже при перезагрузке компа):\nexport function saveState<T>(key: string, state: T) {\n    const stateAsString = JSON.stringify(state)\n    localStorage.setItem(key, stateAsString)\n    return s\n}\n\n// и вот вам функция для получения сохранённого объекта в памяти браузера:\nexport function restoreState<T>(key: string, defaultState: T) {\n    let state = defaultState\n    // console.log(key,\"key\")\n    const stateAsString = localStorage.getItem(key)\n\n    if (stateAsString !== null) state = JSON.parse(stateAsString) as T\n\n    return state\n}\n\n// ---------------------------------------------------------------------------------------------------------------\n// пример использования:\n/*\ntype StateType = {\n    x: string\n    y: number\n}\n\n// сохраняем объект типа StateType в ячейке 'test'\nsaveState<StateType>('test', { x: 'A', y: 1 })\n\n// получаем в переменную state объект из ячейки 'test' или дэфолтный объект если ячейка пуста\nconst state: StateType = restoreState<StateType>('test', { x: '', y: 0 })\n */\n"],"mappings":"AAAA;AACA;AACA,OAAO,SAASA,SAASA,CAAIC,GAAW,EAAEC,KAAQ,EAAE;EAChD,MAAMC,aAAa,GAAGC,IAAI,CAACC,SAAS,CAACH,KAAK,CAAC;EAC3CI,YAAY,CAACC,OAAO,CAACN,GAAG,EAAEE,aAAa,CAAC;EACxC,OAAOK,CAAC;AACZ;;AAEA;AACA,OAAO,SAASC,YAAYA,CAAIR,GAAW,EAAES,YAAe,EAAE;EAC1D,IAAIR,KAAK,GAAGQ,YAAY;EACxB;EACA,MAAMP,aAAa,GAAGG,YAAY,CAACK,OAAO,CAACV,GAAG,CAAC;EAE/C,IAAIE,aAAa,KAAK,IAAI,EAAED,KAAK,GAAGE,IAAI,CAACQ,KAAK,CAACT,aAAa,CAAM;EAElE,OAAOD,KAAK;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}