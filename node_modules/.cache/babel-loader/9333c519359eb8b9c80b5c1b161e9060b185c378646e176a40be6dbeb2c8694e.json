{"ast":null,"code":"import React from\"react\";import s from\"./SuperInputText.module.css\";// тип пропсов обычного инпута\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута, кроме type\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SuperInputText=_ref=>{let{onChange,onChangeText,onKeyPress,onEnter,error,className,spanClassName,id,...restProps// все остальные пропсы попадут в объект restProps\n}=_ref;// console.log(error,\"error!!!!!!\")\n// console.log(value,\"defaultText value\")\n//   useEffect(()=>{\n//     // const res = restoreState<string>(\"hw6-editable-span-value\", \"hello\");\n//     onChangeText?.(\"hello\");\n// },[ ])\nconst onChangeCallback=e=>{onChange===null||onChange===void 0?void 0:onChange(e);// если есть пропс onChange, то передать ему е (поскольку onChange не обязателен)\nonChangeText===null||onChangeText===void 0?void 0:onChangeText(e.currentTarget.value);// onChangeText?.(\"hello\");\n};const onKeyPressCallback=e=>{onKeyPress===null||onKeyPress===void 0?void 0:onKeyPress(e);onEnter&&// если есть пропс onEnter\ne.key===\"Enter\"&&// и если нажата кнопка Enter\nonEnter();// то вызвать его\n};const finalSpanClassName=s.error+(spanClassName?\" \"+spanClassName:\"\");const finalInputClassName=s.input+(error?\" \"+s.errorInput:\" \"+s.superInput)+(className?\" \"+className:\"\");// задача на смешивание классов\nreturn/*#__PURE__*/_jsxs(\"div\",{className:s.inputWrapper,children:[/*#__PURE__*/_jsx(\"span\",{id:id?id+\"-span\":undefined,className:finalSpanClassName,children:error}),/*#__PURE__*/_jsx(\"input\",{id:id,type:\"text\",onChange:onChangeCallback,onKeyPress:onKeyPressCallback,className:finalInputClassName,value:restProps.value,...restProps})]});};export default SuperInputText;","map":{"version":3,"names":["React","s","jsx","_jsx","jsxs","_jsxs","SuperInputText","_ref","onChange","onChangeText","onKeyPress","onEnter","error","className","spanClassName","id","restProps","onChangeCallback","e","currentTarget","value","onKeyPressCallback","key","finalSpanClassName","finalInputClassName","input","errorInput","superInput","inputWrapper","children","undefined","type"],"sources":["/Users/anatolisaukhin/hw-02/src/s2-homeworks/hw04/common/c1-SuperInputText/SuperInputText.tsx"],"sourcesContent":["import React, {\n  ChangeEvent,\n  DetailedHTMLProps,\n  InputHTMLAttributes,\n  KeyboardEvent,\n  ReactNode,\n  useEffect,\n} from \"react\";\nimport s from \"./SuperInputText.module.css\";\nimport { restoreState } from \"../../../hw06/localStorage/localStorage\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<\n  InputHTMLAttributes<HTMLInputElement>,\n  HTMLInputElement\n>;\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута, кроме type\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = Omit<DefaultInputPropsType, \"type\"> & {\n  // и + ещё пропсы которых нет в стандартном инпуте\n  onChangeText?: (value: string) => void;\n  // onEnter?: () => void;\n  onEnter?: () => void;\n  error?: ReactNode;\n  spanClassName?: string;\n};\n\nconst SuperInputText: React.FC<SuperInputTextPropsType> = ({\n  onChange,\n  onChangeText,\n  onKeyPress,\n  onEnter,\n  error,\n  className,\n  spanClassName,\n  id,\n  ...restProps // все остальные пропсы попадут в объект restProps\n}) => {\n  // console.log(error,\"error!!!!!!\")\n\n  // console.log(value,\"defaultText value\")\n\n//   useEffect(()=>{\n//     // const res = restoreState<string>(\"hw6-editable-span-value\", \"hello\");\n//     onChangeText?.(\"hello\");\n\n// },[ ])\n\n  const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n    onChange?.(e); // если есть пропс onChange, то передать ему е (поскольку onChange не обязателен)\n\n    onChangeText?.(e.currentTarget.value);\n    // onChangeText?.(\"hello\");\n  };\n  const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n    onKeyPress?.(e);\n\n    onEnter && // если есть пропс onEnter\n      e.key === \"Enter\" && // и если нажата кнопка Enter\n      onEnter(); // то вызвать его\n  };\n\n  const finalSpanClassName =\n    s.error + (spanClassName ? \" \" + spanClassName : \"\");\n\n  const finalInputClassName =\n    s.input +\n    (error ? \" \" + s.errorInput : \" \" + s.superInput) +\n    (className ? \" \" + className : \"\"); // задача на смешивание классов\n\n  return (\n    <div className={s.inputWrapper}>\n      <span id={id ? id + \"-span\" : undefined} className={finalSpanClassName}>\n        {error}\n      </span>\n\n      <input\n        id={id}\n        type={\"text\"}\n        onChange={onChangeCallback}\n        onKeyPress={onKeyPressCallback}\n        className={finalInputClassName}\n        value={restProps.value}\n        {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n      />\n    </div>\n  );\n};\n\nexport default SuperInputText;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAOL,OAAO,CACd,MAAO,CAAAC,CAAC,KAAM,6BAA6B,CAG3C;AAMA;AACA;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAUA,KAAM,CAAAC,cAAiD,CAAGC,IAAA,EAUpD,IAVqD,CACzDC,QAAQ,CACRC,YAAY,CACZC,UAAU,CACVC,OAAO,CACPC,KAAK,CACLC,SAAS,CACTC,aAAa,CACbC,EAAE,CACF,GAAGC,SAAU;AACf,CAAC,CAAAT,IAAA,CACC;AAEA;AAEF;AACA;AACA;AAEA;AAEE,KAAM,CAAAU,gBAAgB,CAAIC,CAAgC,EAAK,CAC7DV,QAAQ,SAARA,QAAQ,iBAARA,QAAQ,CAAGU,CAAC,CAAC,CAAE;AAEfT,YAAY,SAAZA,YAAY,iBAAZA,YAAY,CAAGS,CAAC,CAACC,aAAa,CAACC,KAAK,CAAC,CACrC;AACF,CAAC,CACD,KAAM,CAAAC,kBAAkB,CAAIH,CAAkC,EAAK,CACjER,UAAU,SAAVA,UAAU,iBAAVA,UAAU,CAAGQ,CAAC,CAAC,CAEfP,OAAO,EAAI;AACTO,CAAC,CAACI,GAAG,GAAK,OAAO,EAAI;AACrBX,OAAO,CAAC,CAAC,CAAE;AACf,CAAC,CAED,KAAM,CAAAY,kBAAkB,CACtBtB,CAAC,CAACW,KAAK,EAAIE,aAAa,CAAG,GAAG,CAAGA,aAAa,CAAG,EAAE,CAAC,CAEtD,KAAM,CAAAU,mBAAmB,CACvBvB,CAAC,CAACwB,KAAK,EACNb,KAAK,CAAG,GAAG,CAAGX,CAAC,CAACyB,UAAU,CAAG,GAAG,CAAGzB,CAAC,CAAC0B,UAAU,CAAC,EAChDd,SAAS,CAAG,GAAG,CAAGA,SAAS,CAAG,EAAE,CAAC,CAAE;AAEtC,mBACER,KAAA,QAAKQ,SAAS,CAAEZ,CAAC,CAAC2B,YAAa,CAAAC,QAAA,eAC7B1B,IAAA,SAAMY,EAAE,CAAEA,EAAE,CAAGA,EAAE,CAAG,OAAO,CAAGe,SAAU,CAACjB,SAAS,CAAEU,kBAAmB,CAAAM,QAAA,CACpEjB,KAAK,CACF,CAAC,cAEPT,IAAA,UACEY,EAAE,CAAEA,EAAG,CACPgB,IAAI,CAAE,MAAO,CACbvB,QAAQ,CAAES,gBAAiB,CAC3BP,UAAU,CAAEW,kBAAmB,CAC/BR,SAAS,CAAEW,mBAAoB,CAC/BJ,KAAK,CAAEJ,SAAS,CAACI,KAAM,IACnBJ,SAAS,CACd,CAAC,EACC,CAAC,CAEV,CAAC,CAED,cAAe,CAAAV,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}