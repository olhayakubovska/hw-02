{"ast":null,"code":"var _jsxFileName = \"/Users/anatolisaukhin/hw-02/src/s2-homeworks/hw03/HW3.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { v1 } from \"uuid\";\nimport s2 from \"../../s1-main/App.module.css\";\nimport GreetingContainer from \"./GreetingContainer\";\n\n/*\n * 1 - описать тип UserType\n * 2 - указать нужный тип в useState с users\n * 3 - дописать типы и логику функции pureAddUserCallback и проверить её тестами\n * 4 - в файле GreetingContainer.tsx дописать типизацию пропсов\n * 5 - в файле GreetingContainer.tsx указать нужные типы в useState с name и error\n * 6 - в файле GreetingContainer.tsx дописать тип и логику функции setNameCallback\n * 7 - в файле GreetingContainer.tsx дописать логику функций pureAddUser, pureOnBlur, pureOnEnter и проверить их тестами\n * 8 - в файле GreetingContainer.tsx вычислить количество добавленных и имя последнего (totalUsers, lastUserName)\n * 9 - в файле Greeting.tsx дописать типизацию пропсов\n * 10 - в файле Greeting.tsx вычислить inputClass в зависимости от наличия ошибки\n * 11 - сделать стили в соответствии с дизайном\n * */\n\n// types\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const pureAddUserCallback = (name, setUsers, users) => {\n  // need to fix any\n  const user = {\n    // need to fix\n    _id: v1(),\n    name\n  };\n  setUsers([...users, user]);\n};\nconst HW3 = () => {\n  _s();\n  const [users, setUsers] = useState([]); // need to fix any\n\n  const addUserCallback = trimmedUser => {\n    // need to fix any\n    console.log(trimmedUser, \"name HM3\");\n    pureAddUserCallback(trimmedUser, setUsers, users);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"hw3\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: s2.hwTitle,\n      children: \"Homework #3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s2.hw,\n      children: /*#__PURE__*/_jsxDEV(GreetingContainer, {\n        users: users,\n        addUserCallback: addUserCallback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(HW3, \"gAXO2JN5F09+lSQAgkU4yvYNIT8=\");\n_c = HW3;\nexport default HW3;\n// import React, { useState } from 'react'\n// import { v1 } from 'uuid'\n// import s2 from '../../s1-main/App.module.css'\n// import GreetingContainer from './GreetingContainer'\n\n// /*\n// * 1 - описать тип UserType\n// * 2 - указать нужный тип в useState с users\n// * 3 - дописать типы и логику функции pureAddUserCallback и проверить её тестами\n// * 4 - в файле GreetingContainer.tsx дописать типизацию пропсов\n// * 5 - в файле GreetingContainer.tsx указать нужные типы в useState с name и error\n// * 6 - в файле GreetingContainer.tsx дописать тип и логику функции setNameCallback\n// * 7 - в файле GreetingContainer.tsx дописать логику функций pureAddUser, pureOnBlur, pureOnEnter и проверить их тестами\n// * 8 - в файле GreetingContainer.tsx вычислить количество добавленных и имя последнего (totalUsers, lastUserName)\n// * 9 - в файле Greeting.tsx дописать типизацию пропсов\n// * 10 - в файле Greeting.tsx вычислить inputClass в зависимости от наличия ошибки\n// * 11 - сделать стили в соответствии с дизайном\n// * */\n\n// // types\n// export type UserType = {\n//     _id: any // need to fix any\n//     name: any // need to fix any\n// }\n\n// export const pureAddUserCallback = (name: any, setUsers: any, users: any) => { // need to fix any\n//     const user = { // need to fix\n//     }\n//     setUsers([...users, user])\n// }\n\n// const HW3 = () => {\n//     const [users, setUsers] = useState<any>([{_id:\"1\", name:\"Ola\" }]) // need to fix any\n\n//     const addUserCallback = (name: any) => { // need to fix any\n//         pureAddUserCallback(name, setUsers, users)\n//     }\n\n//     return (\n//         <div id={'hw3'}>\n//             <div className={s2.hwTitle}>Homework #3</div>\n//             {/*для автоматической проверки дз (не менять)*/}\n\n//             <div className={s2.hw}>\n//                 <GreetingContainer\n//                     users={users}\n//                     addUserCallback={addUserCallback}\n//                 />\n//             </div>\n//         </div>\n//     )\n// }\n\n// export default HW3\nvar _c;\n$RefreshReg$(_c, \"HW3\");","map":{"version":3,"names":["React","useState","v1","s2","GreetingContainer","jsxDEV","_jsxDEV","pureAddUserCallback","name","setUsers","users","user","_id","HW3","_s","addUserCallback","trimmedUser","console","log","id","children","className","hwTitle","fileName","_jsxFileName","lineNumber","columnNumber","hw","_c","$RefreshReg$"],"sources":["/Users/anatolisaukhin/hw-02/src/s2-homeworks/hw03/HW3.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { v1 } from \"uuid\";\nimport s2 from \"../../s1-main/App.module.css\";\nimport GreetingContainer from \"./GreetingContainer\";\n\n/*\n * 1 - описать тип UserType\n * 2 - указать нужный тип в useState с users\n * 3 - дописать типы и логику функции pureAddUserCallback и проверить её тестами\n * 4 - в файле GreetingContainer.tsx дописать типизацию пропсов\n * 5 - в файле GreetingContainer.tsx указать нужные типы в useState с name и error\n * 6 - в файле GreetingContainer.tsx дописать тип и логику функции setNameCallback\n * 7 - в файле GreetingContainer.tsx дописать логику функций pureAddUser, pureOnBlur, pureOnEnter и проверить их тестами\n * 8 - в файле GreetingContainer.tsx вычислить количество добавленных и имя последнего (totalUsers, lastUserName)\n * 9 - в файле Greeting.tsx дописать типизацию пропсов\n * 10 - в файле Greeting.tsx вычислить inputClass в зависимости от наличия ошибки\n * 11 - сделать стили в соответствии с дизайном\n * */\n\n// types\nexport type UserType = {\n  _id: string; // need to fix any\n  name: string; // need to fix any\n};\n\nexport const pureAddUserCallback = (name: any, setUsers: any, users: any) => {\n  // need to fix any\n  const user = {\n    // need to fix\n    _id: v1(),\n    name,\n  };\n  setUsers([...users, user]);\n};\n\nconst HW3 = () => {\n  const [users, setUsers] = useState<UserType[]>([]); // need to fix any\n\n  const addUserCallback = (trimmedUser: string) => {\n    // need to fix any\n    console.log(trimmedUser,\"name HM3\")\n    pureAddUserCallback(trimmedUser, setUsers, users);\n  };\n\n  return (\n    <div id={\"hw3\"}>\n      <div className={s2.hwTitle}>Homework #3</div>\n      {/*для автоматической проверки дз (не менять)*/}\n\n      <div className={s2.hw}>\n        <GreetingContainer users={users} addUserCallback={addUserCallback} />\n      </div>\n    </div>\n  );\n};\n\nexport default HW3;\n// import React, { useState } from 'react'\n// import { v1 } from 'uuid'\n// import s2 from '../../s1-main/App.module.css'\n// import GreetingContainer from './GreetingContainer'\n\n// /*\n// * 1 - описать тип UserType\n// * 2 - указать нужный тип в useState с users\n// * 3 - дописать типы и логику функции pureAddUserCallback и проверить её тестами\n// * 4 - в файле GreetingContainer.tsx дописать типизацию пропсов\n// * 5 - в файле GreetingContainer.tsx указать нужные типы в useState с name и error\n// * 6 - в файле GreetingContainer.tsx дописать тип и логику функции setNameCallback\n// * 7 - в файле GreetingContainer.tsx дописать логику функций pureAddUser, pureOnBlur, pureOnEnter и проверить их тестами\n// * 8 - в файле GreetingContainer.tsx вычислить количество добавленных и имя последнего (totalUsers, lastUserName)\n// * 9 - в файле Greeting.tsx дописать типизацию пропсов\n// * 10 - в файле Greeting.tsx вычислить inputClass в зависимости от наличия ошибки\n// * 11 - сделать стили в соответствии с дизайном\n// * */\n\n// // types\n// export type UserType = {\n//     _id: any // need to fix any\n//     name: any // need to fix any\n// }\n\n// export const pureAddUserCallback = (name: any, setUsers: any, users: any) => { // need to fix any\n//     const user = { // need to fix\n//     }\n//     setUsers([...users, user])\n// }\n\n// const HW3 = () => {\n//     const [users, setUsers] = useState<any>([{_id:\"1\", name:\"Ola\" }]) // need to fix any\n\n//     const addUserCallback = (name: any) => { // need to fix any\n//         pureAddUserCallback(name, setUsers, users)\n//     }\n\n//     return (\n//         <div id={'hw3'}>\n//             <div className={s2.hwTitle}>Homework #3</div>\n//             {/*для автоматической проверки дз (не менять)*/}\n\n//             <div className={s2.hw}>\n//                 <GreetingContainer\n//                     users={users}\n//                     addUserCallback={addUserCallback}\n//                 />\n//             </div>\n//         </div>\n//     )\n// }\n\n// export default HW3\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,EAAE,QAAQ,MAAM;AACzB,OAAOC,EAAE,MAAM,8BAA8B;AAC7C,OAAOC,iBAAiB,MAAM,qBAAqB;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAMA,OAAO,MAAMC,mBAAmB,GAAGA,CAACC,IAAS,EAAEC,QAAa,EAAEC,KAAU,KAAK;EAC3E;EACA,MAAMC,IAAI,GAAG;IACX;IACAC,GAAG,EAAEV,EAAE,CAAC,CAAC;IACTM;EACF,CAAC;EACDC,QAAQ,CAAC,CAAC,GAAGC,KAAK,EAAEC,IAAI,CAAC,CAAC;AAC5B,CAAC;AAED,MAAME,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACJ,KAAK,EAAED,QAAQ,CAAC,GAAGR,QAAQ,CAAa,EAAE,CAAC,CAAC,CAAC;;EAEpD,MAAMc,eAAe,GAAIC,WAAmB,IAAK;IAC/C;IACAC,OAAO,CAACC,GAAG,CAACF,WAAW,EAAC,UAAU,CAAC;IACnCT,mBAAmB,CAACS,WAAW,EAAEP,QAAQ,EAAEC,KAAK,CAAC;EACnD,CAAC;EAED,oBACEJ,OAAA;IAAKa,EAAE,EAAE,KAAM;IAAAC,QAAA,gBACbd,OAAA;MAAKe,SAAS,EAAElB,EAAE,CAACmB,OAAQ;MAAAF,QAAA,EAAC;IAAW;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAG7CpB,OAAA;MAAKe,SAAS,EAAElB,EAAE,CAACwB,EAAG;MAAAP,QAAA,eACpBd,OAAA,CAACF,iBAAiB;QAACM,KAAK,EAAEA,KAAM;QAACK,eAAe,EAAEA;MAAgB;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACZ,EAAA,CAnBID,GAAG;AAAAe,EAAA,GAAHf,GAAG;AAqBT,eAAeA,GAAG;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}