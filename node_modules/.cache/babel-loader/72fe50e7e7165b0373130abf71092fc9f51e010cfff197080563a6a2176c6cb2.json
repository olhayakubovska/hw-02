{"ast":null,"code":"import React from\"react\";import Message from\"./message/Message\";import MessageSender from\"./message-sender/MessageSender\";import s2 from\"../../s1-main/App.module.css\";import FriendMessage from\"./friend-message/FriendMessage\";import avatar from\"./avatar.png\";/*\n * 1 - описать тип MessageType\n * 2 - описать тип MessagePropsType в файле Message.tsx\n * 3 - в файле Message.tsx отобразить приходящие данные\n * 4 - выполнить пункты 2, 3 в файле FriendMessage.tsx\n * 5 - сделать стили в соответствии с дизайном\n * */// нужно создать правильный тип вместо any\n//  avatar: typeof avatar;\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";// структуру объекта не менять\nexport const message0={id:0,user:{avatar:avatar,// можно менять\nname:\"Some Name\"// можно менять\n},message:{text:\"some textsome textsome textsome textsome textsome textsome text\",// можно менять\ntime:\"22:00\"// можно менять\n}};export const friendMessage0={id:100,user:{avatar:avatar,// можно менять\nname:\"Friend Name\"// можно менять\n},message:{text:\"зеркальное сообщение для тренировки css\",// можно менять\ntime:\"22:00\"// можно менять\n}};const HW1=()=>{return/*#__PURE__*/_jsxs(\"div\",{id:\"hw1\",children:[/*#__PURE__*/_jsx(\"div\",{className:s2.hwTitle,children:\"Homework #1\"}),/*#__PURE__*/_jsxs(\"div\",{className:s2.hw,children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Message,{message:message0}),/*#__PURE__*/_jsx(FriendMessage,{message:friendMessage0})]}),/*#__PURE__*/_jsx(MessageSender,{M:Message})]})]});};export default HW1;// import React from \"react\";\n// import Message from \"./message/Message\";\n// import MessageSender from \"./message-sender/MessageSender\";\n// import s2 from \"../../s1-main/App.module.css\";\n// import FriendMessage from \"./friend-message/FriendMessage\";\n// import avatar from \"./avatar.png\";\n// /*\n//  * 1 - описать тип MessageType\n//  * 2 - описать тип MessagePropsType в файле Message.tsx\n//  * 3 - в файле Message.tsx отобразить приходящие данные\n//  * 4 - выполнить пункты 2, 3 в файле FriendMessage.tsx\n//  * 5 - сделать стили в соответствии с дизайном\n//  * */\n// // нужно создать правильный тип вместо any\n// export type MessageType = {\n//   id: number;\n//   user: UserType;\n//   message: MessageObjPropType;\n// };\n// //  avatar: typeof avatar;\n//  type UserType = {\n//   avatar: string;\n//   // avatar: typeof avatar;\n//   name: string;\n// };\n// export type MessageObjPropType = {\n//   text: string;\n//   time: string;\n// };\n// // структуру объекта не менять\n// export const message0: MessageType = {\n//   id: 0,\n//   user: {\n//     avatar: avatar, // можно менять\n//     name: \"Some Name\", // можно менять\n//   },\n//   message: {\n//     text: \"some textsome textsome textsome textsome textsome textsome text\", // можно менять\n//     time: \"22:00\", // можно менять\n//   },\n// };\n// export const friendMessage0: MessageType = {\n//   id: 100,\n//   user: {\n//     avatar: avatar, // можно менять\n//     name: \"Friend Name\", // можно менять\n//   },\n//   message: {\n//     text: \"зеркальное сообщение для тренировки css\", // можно менять\n//     time: \"22:00\", // можно менять\n//   },\n// };\n// const HW1 = () => {\n//   return (\n//     <div id={\"hw1\"}>\n//       <div className={s2.hwTitle}>Homework #1</div>\n//       <div className={s2.hw}>\n//         {/*проверка отображения (не менять)*/}\n//         <div>\n//           <Message message={message0} />\n//           <FriendMessage message={friendMessage0} />\n//         </div>\n//         {/*для автоматической проверки дз (не менять)*/}\n//         <MessageSender M={Message} />\n//       </div>\n//     </div>\n//   );\n// };\n// export default HW1;","map":{"version":3,"names":["React","Message","MessageSender","s2","FriendMessage","avatar","jsx","_jsx","jsxs","_jsxs","message0","id","user","name","message","text","time","friendMessage0","HW1","children","className","hwTitle","hw","M"],"sources":["/Users/anatolisaukhin/hw-02/src/s2-homeworks/hw01/HW1.tsx"],"sourcesContent":["import React from \"react\";\nimport Message from \"./message/Message\";\nimport MessageSender from \"./message-sender/MessageSender\";\nimport s2 from \"../../s1-main/App.module.css\";\nimport FriendMessage from \"./friend-message/FriendMessage\";\nimport avatar from \"./avatar.png\";\n\n/*\n * 1 - описать тип MessageType\n * 2 - описать тип MessagePropsType в файле Message.tsx\n * 3 - в файле Message.tsx отобразить приходящие данные\n * 4 - выполнить пункты 2, 3 в файле FriendMessage.tsx\n * 5 - сделать стили в соответствии с дизайном\n * */\n\n// нужно создать правильный тип вместо any\nexport type MessageType = {\n  id: number;\n  user: UserType;\n  message: MessageObjPropType;\n};\n//  avatar: typeof avatar;\n\n type UserType = {\n  avatar: string;\n  // avatar: typeof avatar;\n\n  name: string;\n};\n\nexport type MessageObjPropType = {\n  text: string;\n  time: string;\n};\n\n// структуру объекта не менять\nexport const message0: MessageType = {\n  id: 0,\n  user: {\n    avatar: avatar, // можно менять\n    name: \"Some Name\", // можно менять\n  },\n  message: {\n    text: \"some textsome textsome textsome textsome textsome textsome text\", // можно менять\n    time: \"22:00\", // можно менять\n  },\n};\nexport const friendMessage0: MessageType = {\n  id: 100,\n  user: {\n    avatar: avatar, // можно менять\n    name: \"Friend Name\", // можно менять\n  },\n  message: {\n    text: \"зеркальное сообщение для тренировки css\", // можно менять\n    time: \"22:00\", // можно менять\n  },\n};\n\nconst HW1 = () => {\n  return (\n    <div id={\"hw1\"}>\n      <div className={s2.hwTitle}>Homework #1</div>\n      <div className={s2.hw}>\n        {/*проверка отображения (не менять)*/}\n        <div >\n          <Message message={message0} />\n          <FriendMessage message={friendMessage0} />\n        </div>\n\n        {/*для автоматической проверки дз (не менять)*/}\n        <MessageSender M={Message} />\n      </div>\n    </div>\n  );\n};\n\nexport default HW1;\n\n\n\n\n\n// import React from \"react\";\n// import Message from \"./message/Message\";\n// import MessageSender from \"./message-sender/MessageSender\";\n// import s2 from \"../../s1-main/App.module.css\";\n// import FriendMessage from \"./friend-message/FriendMessage\";\n// import avatar from \"./avatar.png\";\n\n// /*\n//  * 1 - описать тип MessageType\n//  * 2 - описать тип MessagePropsType в файле Message.tsx\n//  * 3 - в файле Message.tsx отобразить приходящие данные\n//  * 4 - выполнить пункты 2, 3 в файле FriendMessage.tsx\n//  * 5 - сделать стили в соответствии с дизайном\n//  * */\n\n// // нужно создать правильный тип вместо any\n// export type MessageType = {\n//   id: number;\n//   user: UserType;\n//   message: MessageObjPropType;\n// };\n// //  avatar: typeof avatar;\n\n//  type UserType = {\n//   avatar: string;\n//   // avatar: typeof avatar;\n\n//   name: string;\n// };\n\n// export type MessageObjPropType = {\n//   text: string;\n//   time: string;\n// };\n\n// // структуру объекта не менять\n// export const message0: MessageType = {\n//   id: 0,\n//   user: {\n//     avatar: avatar, // можно менять\n//     name: \"Some Name\", // можно менять\n//   },\n//   message: {\n//     text: \"some textsome textsome textsome textsome textsome textsome text\", // можно менять\n//     time: \"22:00\", // можно менять\n//   },\n// };\n// export const friendMessage0: MessageType = {\n//   id: 100,\n//   user: {\n//     avatar: avatar, // можно менять\n//     name: \"Friend Name\", // можно менять\n//   },\n//   message: {\n//     text: \"зеркальное сообщение для тренировки css\", // можно менять\n//     time: \"22:00\", // можно менять\n//   },\n// };\n\n// const HW1 = () => {\n//   return (\n//     <div id={\"hw1\"}>\n//       <div className={s2.hwTitle}>Homework #1</div>\n//       <div className={s2.hw}>\n//         {/*проверка отображения (не менять)*/}\n//         <div>\n//           <Message message={message0} />\n//           <FriendMessage message={friendMessage0} />\n//         </div>\n\n//         {/*для автоматической проверки дз (не менять)*/}\n//         <MessageSender M={Message} />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default HW1;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,OAAO,KAAM,mBAAmB,CACvC,MAAO,CAAAC,aAAa,KAAM,gCAAgC,CAC1D,MAAO,CAAAC,EAAE,KAAM,8BAA8B,CAC7C,MAAO,CAAAC,aAAa,KAAM,gCAAgC,CAC1D,MAAO,CAAAC,MAAM,KAAM,cAAc,CAEjC;AACA;AACA;AACA;AACA;AACA;AACA,KAEA;AAMA;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAcA;AACA,MAAO,MAAM,CAAAC,QAAqB,CAAG,CACnCC,EAAE,CAAE,CAAC,CACLC,IAAI,CAAE,CACJP,MAAM,CAAEA,MAAM,CAAE;AAChBQ,IAAI,CAAE,WAAa;AACrB,CAAC,CACDC,OAAO,CAAE,CACPC,IAAI,CAAE,iEAAiE,CAAE;AACzEC,IAAI,CAAE,OAAS;AACjB,CACF,CAAC,CACD,MAAO,MAAM,CAAAC,cAA2B,CAAG,CACzCN,EAAE,CAAE,GAAG,CACPC,IAAI,CAAE,CACJP,MAAM,CAAEA,MAAM,CAAE;AAChBQ,IAAI,CAAE,aAAe;AACvB,CAAC,CACDC,OAAO,CAAE,CACPC,IAAI,CAAE,yCAAyC,CAAE;AACjDC,IAAI,CAAE,OAAS;AACjB,CACF,CAAC,CAED,KAAM,CAAAE,GAAG,CAAGA,CAAA,GAAM,CAChB,mBACET,KAAA,QAAKE,EAAE,CAAE,KAAM,CAAAQ,QAAA,eACbZ,IAAA,QAAKa,SAAS,CAAEjB,EAAE,CAACkB,OAAQ,CAAAF,QAAA,CAAC,aAAW,CAAK,CAAC,cAC7CV,KAAA,QAAKW,SAAS,CAAEjB,EAAE,CAACmB,EAAG,CAAAH,QAAA,eAEpBV,KAAA,QAAAU,QAAA,eACEZ,IAAA,CAACN,OAAO,EAACa,OAAO,CAAEJ,QAAS,CAAE,CAAC,cAC9BH,IAAA,CAACH,aAAa,EAACU,OAAO,CAAEG,cAAe,CAAE,CAAC,EACvC,CAAC,cAGNV,IAAA,CAACL,aAAa,EAACqB,CAAC,CAAEtB,OAAQ,CAAE,CAAC,EAC1B,CAAC,EACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAAiB,GAAG,CAMlB;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}