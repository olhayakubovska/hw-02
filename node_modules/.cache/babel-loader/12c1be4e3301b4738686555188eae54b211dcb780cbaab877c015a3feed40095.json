{"ast":null,"code":"var _jsxFileName = \"/Users/anatolisaukhin/hw-02/src/s2-homeworks/hw04/common/c1-SuperInputText/SuperInputText.tsx\";\nimport React from \"react\";\nimport s from \"./SuperInputText.module.css\";\n\n// тип пропсов обычного инпута\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута, кроме type\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SuperInputText = ({\n  onChange,\n  onChangeText,\n  onKeyPress,\n  onEnter,\n  error,\n  className,\n  spanClassName,\n  id,\n  value,\n  ...restProps // все остальные пропсы попадут в объект restProps\n}) => {\n  // console.log(error,\"error!!!!!!\")\n\n  // console.log(value,\"defaultText value\")\n\n  const onChangeCallback = e => {\n    onChange === null || onChange === void 0 ? void 0 : onChange(e); // если есть пропс onChange, то передать ему е (поскольку onChange не обязателен)\n\n    onChangeText === null || onChangeText === void 0 ? void 0 : onChangeText(e.currentTarget.value);\n  };\n  const onKeyPressCallback = e => {\n    onKeyPress === null || onKeyPress === void 0 ? void 0 : onKeyPress(e);\n    onEnter &&\n    // если есть пропс onEnter\n    e.key === \"Enter\" &&\n    // и если нажата кнопка Enter\n    onEnter(); // то вызвать его\n  };\n  const finalSpanClassName = s.error + (spanClassName ? \" \" + spanClassName : \"\");\n  const finalInputClassName = s.input + (error ? \" \" + s.errorInput : \" \" + s.superInput) + (className ? \" \" + className : \"\"); // задача на смешивание классов\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.inputWrapper,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      id: id ? id + \"-span\" : undefined,\n      className: finalSpanClassName,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: id,\n      type: \"text\",\n      onChange: onChangeCallback,\n      onKeyPress: onKeyPressCallback,\n      className: finalInputClassName,\n      value: value,\n      ...restProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_c = SuperInputText;\nexport default SuperInputText;\nvar _c;\n$RefreshReg$(_c, \"SuperInputText\");","map":{"version":3,"names":["React","s","jsxDEV","_jsxDEV","SuperInputText","onChange","onChangeText","onKeyPress","onEnter","error","className","spanClassName","id","value","restProps","onChangeCallback","e","currentTarget","onKeyPressCallback","key","finalSpanClassName","finalInputClassName","input","errorInput","superInput","inputWrapper","children","undefined","fileName","_jsxFileName","lineNumber","columnNumber","type","_c","$RefreshReg$"],"sources":["/Users/anatolisaukhin/hw-02/src/s2-homeworks/hw04/common/c1-SuperInputText/SuperInputText.tsx"],"sourcesContent":["import React, {\n  ChangeEvent,\n  DetailedHTMLProps,\n  InputHTMLAttributes,\n  KeyboardEvent,\n  ReactNode,\n} from \"react\";\nimport s from \"./SuperInputText.module.css\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<\n  InputHTMLAttributes<HTMLInputElement>,\n  HTMLInputElement\n>;\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута, кроме type\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = Omit<DefaultInputPropsType, \"type\"> & {\n  // и + ещё пропсы которых нет в стандартном инпуте\n  onChangeText?: (value: string) => void;\n  // onEnter?: () => void;\n  onEnter?: () => void; \n  error?: ReactNode;\n  spanClassName?: string;\n};\n\nconst SuperInputText: React.FC<SuperInputTextPropsType> = ({\n  onChange,\n  onChangeText,\n  onKeyPress,\n  onEnter,\n  error,\n  className,\n  spanClassName,\n  id,\nvalue,\n  ...restProps // все остальные пропсы попадут в объект restProps\n}) => {\n  // console.log(error,\"error!!!!!!\")\n\n// console.log(value,\"defaultText value\")\n\n  const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n    onChange?.(e); // если есть пропс onChange, то передать ему е (поскольку onChange не обязателен)\n\n    onChangeText?.( e.currentTarget.value  );\n  };\n  const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n    onKeyPress?.(e);\n\n    onEnter && // если есть пропс onEnter\n      e.key === \"Enter\" && // и если нажата кнопка Enter\n      onEnter(); // то вызвать его\n  };\n\n  const finalSpanClassName =\n    s.error + (spanClassName ? \" \" + spanClassName : \"\");\n\n  const finalInputClassName =\n    s.input +\n    (error ? \" \" + s.errorInput : \" \" + s.superInput) +\n    (className ? \" \" + className : \"\"); // задача на смешивание классов\n\n  return (\n    <div className={s.inputWrapper}>\n      <span id={id ? id + \"-span\" : undefined} className={finalSpanClassName}>\n        {error}\n      </span>\n\n      <input\n        id={id}\n        type={\"text\"}\n\n        onChange={onChangeCallback}\n        onKeyPress={onKeyPressCallback}\n        className={finalInputClassName}\n        value={value}\n        {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n      />\n    </div>\n  );\n};\n\nexport default SuperInputText;\n"],"mappings":";AAAA,OAAOA,KAAK,MAML,OAAO;AACd,OAAOC,CAAC,MAAM,6BAA6B;;AAE3C;;AAMA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAUA,MAAMC,cAAiD,GAAGA,CAAC;EACzDC,QAAQ;EACRC,YAAY;EACZC,UAAU;EACVC,OAAO;EACPC,KAAK;EACLC,SAAS;EACTC,aAAa;EACbC,EAAE;EACJC,KAAK;EACH,GAAGC,SAAS,CAAC;AACf,CAAC,KAAK;EACJ;;EAEF;;EAEE,MAAMC,gBAAgB,GAAIC,CAAgC,IAAK;IAC7DX,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAGW,CAAC,CAAC,CAAC,CAAC;;IAEfV,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAIU,CAAC,CAACC,aAAa,CAACJ,KAAO,CAAC;EAC1C,CAAC;EACD,MAAMK,kBAAkB,GAAIF,CAAkC,IAAK;IACjET,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAGS,CAAC,CAAC;IAEfR,OAAO;IAAI;IACTQ,CAAC,CAACG,GAAG,KAAK,OAAO;IAAI;IACrBX,OAAO,CAAC,CAAC,CAAC,CAAC;EACf,CAAC;EAED,MAAMY,kBAAkB,GACtBnB,CAAC,CAACQ,KAAK,IAAIE,aAAa,GAAG,GAAG,GAAGA,aAAa,GAAG,EAAE,CAAC;EAEtD,MAAMU,mBAAmB,GACvBpB,CAAC,CAACqB,KAAK,IACNb,KAAK,GAAG,GAAG,GAAGR,CAAC,CAACsB,UAAU,GAAG,GAAG,GAAGtB,CAAC,CAACuB,UAAU,CAAC,IAChDd,SAAS,GAAG,GAAG,GAAGA,SAAS,GAAG,EAAE,CAAC,CAAC,CAAC;;EAEtC,oBACEP,OAAA;IAAKO,SAAS,EAAET,CAAC,CAACwB,YAAa;IAAAC,QAAA,gBAC7BvB,OAAA;MAAMS,EAAE,EAAEA,EAAE,GAAGA,EAAE,GAAG,OAAO,GAAGe,SAAU;MAACjB,SAAS,EAAEU,kBAAmB;MAAAM,QAAA,EACpEjB;IAAK;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eAEP5B,OAAA;MACES,EAAE,EAAEA,EAAG;MACPoB,IAAI,EAAE,MAAO;MAEb3B,QAAQ,EAAEU,gBAAiB;MAC3BR,UAAU,EAAEW,kBAAmB;MAC/BR,SAAS,EAAEW,mBAAoB;MAC/BR,KAAK,EAAEA,KAAM;MAAA,GACTC;IAAS;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACE,EAAA,GAvDI7B,cAAiD;AAyDvD,eAAeA,cAAc;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}