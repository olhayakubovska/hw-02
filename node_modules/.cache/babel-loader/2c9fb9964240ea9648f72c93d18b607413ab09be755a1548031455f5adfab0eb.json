{"ast":null,"code":"import React,{useState}from\"react\";import{v1}from\"uuid\";import s2 from\"../../s1-main/App.module.css\";import GreetingContainer from\"./GreetingContainer\";/*\n * 1 - описать тип UserType\n * 2 - указать нужный тип в useState с users\n * 3 - дописать типы и логику функции pureAddUserCallback и проверить её тестами\n * 4 - в файле GreetingContainer.tsx дописать типизацию пропсов\n * 5 - в файле GreetingContainer.tsx указать нужные типы в useState с name и error\n * 6 - в файле GreetingContainer.tsx дописать тип и логику функции setNameCallback\n * 7 - в файле GreetingContainer.tsx дописать логику функций pureAddUser, pureOnBlur, pureOnEnter и проверить их тестами\n * 8 - в файле GreetingContainer.tsx вычислить количество добавленных и имя последнего (totalUsers, lastUserName)\n * 9 - в файле Greeting.tsx дописать типизацию пропсов\n * 10 - в файле Greeting.tsx вычислить inputClass в зависимости от наличия ошибки\n * 11 - сделать стили в соответствии с дизайном\n * */// types\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export const pureAddUserCallback=(name,setUsers,users)=>{// need to fix any\nconst user={// need to fix\n_id:v1(),name};setUsers([...users,user]);};const HW3=()=>{const[users,setUsers]=useState([]);// need to fix any\nconst addUserCallback=name=>{// need to fix any\nconsole.log(name,\"name HM\");pureAddUserCallback(name,setUsers,users);};return/*#__PURE__*/_jsxs(\"div\",{id:\"hw3\",children:[/*#__PURE__*/_jsx(\"div\",{className:s2.hwTitle,children:\"Homework #3\"}),/*#__PURE__*/_jsx(\"div\",{className:s2.hw,children:/*#__PURE__*/_jsx(GreetingContainer,{users:users,addUserCallback:addUserCallback})})]});};export default HW3;// import React, { useState } from 'react'\n// import { v1 } from 'uuid'\n// import s2 from '../../s1-main/App.module.css'\n// import GreetingContainer from './GreetingContainer'\n// /*\n// * 1 - описать тип UserType\n// * 2 - указать нужный тип в useState с users\n// * 3 - дописать типы и логику функции pureAddUserCallback и проверить её тестами\n// * 4 - в файле GreetingContainer.tsx дописать типизацию пропсов\n// * 5 - в файле GreetingContainer.tsx указать нужные типы в useState с name и error\n// * 6 - в файле GreetingContainer.tsx дописать тип и логику функции setNameCallback\n// * 7 - в файле GreetingContainer.tsx дописать логику функций pureAddUser, pureOnBlur, pureOnEnter и проверить их тестами\n// * 8 - в файле GreetingContainer.tsx вычислить количество добавленных и имя последнего (totalUsers, lastUserName)\n// * 9 - в файле Greeting.tsx дописать типизацию пропсов\n// * 10 - в файле Greeting.tsx вычислить inputClass в зависимости от наличия ошибки\n// * 11 - сделать стили в соответствии с дизайном\n// * */\n// // types\n// export type UserType = {\n//     _id: any // need to fix any\n//     name: any // need to fix any\n// }\n// export const pureAddUserCallback = (name: any, setUsers: any, users: any) => { // need to fix any\n//     const user = { // need to fix\n//     }\n//     setUsers([...users, user])\n// }\n// const HW3 = () => {\n//     const [users, setUsers] = useState<any>([{_id:\"1\", name:\"Ola\" }]) // need to fix any\n//     const addUserCallback = (name: any) => { // need to fix any\n//         pureAddUserCallback(name, setUsers, users)\n//     }\n//     return (\n//         <div id={'hw3'}>\n//             <div className={s2.hwTitle}>Homework #3</div>\n//             {/*для автоматической проверки дз (не менять)*/}\n//             <div className={s2.hw}>\n//                 <GreetingContainer\n//                     users={users}\n//                     addUserCallback={addUserCallback}\n//                 />\n//             </div>\n//         </div>\n//     )\n// }\n// export default HW3","map":{"version":3,"names":["React","useState","v1","s2","GreetingContainer","jsx","_jsx","jsxs","_jsxs","pureAddUserCallback","name","setUsers","users","user","_id","HW3","addUserCallback","console","log","id","children","className","hwTitle","hw"],"sources":["/Users/anatolisaukhin/hw-02/src/s2-homeworks/hw03/HW3.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { v1 } from \"uuid\";\nimport s2 from \"../../s1-main/App.module.css\";\nimport GreetingContainer from \"./GreetingContainer\";\n\n/*\n * 1 - описать тип UserType\n * 2 - указать нужный тип в useState с users\n * 3 - дописать типы и логику функции pureAddUserCallback и проверить её тестами\n * 4 - в файле GreetingContainer.tsx дописать типизацию пропсов\n * 5 - в файле GreetingContainer.tsx указать нужные типы в useState с name и error\n * 6 - в файле GreetingContainer.tsx дописать тип и логику функции setNameCallback\n * 7 - в файле GreetingContainer.tsx дописать логику функций pureAddUser, pureOnBlur, pureOnEnter и проверить их тестами\n * 8 - в файле GreetingContainer.tsx вычислить количество добавленных и имя последнего (totalUsers, lastUserName)\n * 9 - в файле Greeting.tsx дописать типизацию пропсов\n * 10 - в файле Greeting.tsx вычислить inputClass в зависимости от наличия ошибки\n * 11 - сделать стили в соответствии с дизайном\n * */\n\n// types\nexport type UserType = {\n  _id: string; // need to fix any\n  name: string; // need to fix any\n};\n\nexport const pureAddUserCallback = (name: any, setUsers: any, users: any) => {\n  // need to fix any\n  const user = {\n    // need to fix\n    _id: v1(),\n    name,\n  };\n  setUsers([...users, user]);\n};\n\nconst HW3 = () => {\n  const [users, setUsers] = useState<UserType[]>([]); // need to fix any\n\n  const addUserCallback = (name: string) => {\n    // need to fix any\n    console.log(name,\"name HM\")\n    pureAddUserCallback(name, setUsers, users);\n  };\n\n  return (\n    <div id={\"hw3\"}>\n      <div className={s2.hwTitle}>Homework #3</div>\n      {/*для автоматической проверки дз (не менять)*/}\n\n      <div className={s2.hw}>\n        <GreetingContainer users={users} addUserCallback={addUserCallback} />\n      </div>\n    </div>\n  );\n};\n\nexport default HW3;\n// import React, { useState } from 'react'\n// import { v1 } from 'uuid'\n// import s2 from '../../s1-main/App.module.css'\n// import GreetingContainer from './GreetingContainer'\n\n// /*\n// * 1 - описать тип UserType\n// * 2 - указать нужный тип в useState с users\n// * 3 - дописать типы и логику функции pureAddUserCallback и проверить её тестами\n// * 4 - в файле GreetingContainer.tsx дописать типизацию пропсов\n// * 5 - в файле GreetingContainer.tsx указать нужные типы в useState с name и error\n// * 6 - в файле GreetingContainer.tsx дописать тип и логику функции setNameCallback\n// * 7 - в файле GreetingContainer.tsx дописать логику функций pureAddUser, pureOnBlur, pureOnEnter и проверить их тестами\n// * 8 - в файле GreetingContainer.tsx вычислить количество добавленных и имя последнего (totalUsers, lastUserName)\n// * 9 - в файле Greeting.tsx дописать типизацию пропсов\n// * 10 - в файле Greeting.tsx вычислить inputClass в зависимости от наличия ошибки\n// * 11 - сделать стили в соответствии с дизайном\n// * */\n\n// // types\n// export type UserType = {\n//     _id: any // need to fix any\n//     name: any // need to fix any\n// }\n\n// export const pureAddUserCallback = (name: any, setUsers: any, users: any) => { // need to fix any\n//     const user = { // need to fix\n//     }\n//     setUsers([...users, user])\n// }\n\n// const HW3 = () => {\n//     const [users, setUsers] = useState<any>([{_id:\"1\", name:\"Ola\" }]) // need to fix any\n\n//     const addUserCallback = (name: any) => { // need to fix any\n//         pureAddUserCallback(name, setUsers, users)\n//     }\n\n//     return (\n//         <div id={'hw3'}>\n//             <div className={s2.hwTitle}>Homework #3</div>\n//             {/*для автоматической проверки дз (не менять)*/}\n\n//             <div className={s2.hw}>\n//                 <GreetingContainer\n//                     users={users}\n//                     addUserCallback={addUserCallback}\n//                 />\n//             </div>\n//         </div>\n//     )\n// }\n\n// export default HW3\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,EAAE,KAAQ,MAAM,CACzB,MAAO,CAAAC,EAAE,KAAM,8BAA8B,CAC7C,MAAO,CAAAC,iBAAiB,KAAM,qBAAqB,CAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAEA;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAMA,MAAO,MAAM,CAAAC,mBAAmB,CAAGA,CAACC,IAAS,CAAEC,QAAa,CAAEC,KAAU,GAAK,CAC3E;AACA,KAAM,CAAAC,IAAI,CAAG,CACX;AACAC,GAAG,CAAEZ,EAAE,CAAC,CAAC,CACTQ,IACF,CAAC,CACDC,QAAQ,CAAC,CAAC,GAAGC,KAAK,CAAEC,IAAI,CAAC,CAAC,CAC5B,CAAC,CAED,KAAM,CAAAE,GAAG,CAAGA,CAAA,GAAM,CAChB,KAAM,CAACH,KAAK,CAAED,QAAQ,CAAC,CAAGV,QAAQ,CAAa,EAAE,CAAC,CAAE;AAEpD,KAAM,CAAAe,eAAe,CAAIN,IAAY,EAAK,CACxC;AACAO,OAAO,CAACC,GAAG,CAACR,IAAI,CAAC,SAAS,CAAC,CAC3BD,mBAAmB,CAACC,IAAI,CAAEC,QAAQ,CAAEC,KAAK,CAAC,CAC5C,CAAC,CAED,mBACEJ,KAAA,QAAKW,EAAE,CAAE,KAAM,CAAAC,QAAA,eACbd,IAAA,QAAKe,SAAS,CAAElB,EAAE,CAACmB,OAAQ,CAAAF,QAAA,CAAC,aAAW,CAAK,CAAC,cAG7Cd,IAAA,QAAKe,SAAS,CAAElB,EAAE,CAACoB,EAAG,CAAAH,QAAA,cACpBd,IAAA,CAACF,iBAAiB,EAACQ,KAAK,CAAEA,KAAM,CAACI,eAAe,CAAEA,eAAgB,CAAE,CAAC,CAClE,CAAC,EACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAAD,GAAG,CAClB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}