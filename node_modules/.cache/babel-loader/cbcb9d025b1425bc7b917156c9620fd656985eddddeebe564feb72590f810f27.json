{"ast":null,"code":"var _jsxFileName = \"/Users/anatolisaukhin/hw-02/src/s2-homeworks/hw06/common/c4-SuperEditableSpan/SuperEditableSpan.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport s from \"./SuperEditableSpan.module.css\";\nimport SuperInputText from \"../../../hw04/common/c1-SuperInputText/SuperInputText\";\nimport editIcon from \"./editIcon.svg\";\n\n// тип пропсов обычного инпута\n\n// тип пропсов обычного спана\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута, кроме type\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SuperEditableSpan = ({\n  autoFocus,\n  onBlur,\n  onEnter,\n  spanProps,\n  onChangeText,\n  ...restProps // все остальные пропсы попадут в объект restProps\n}) => {\n  _s();\n  const [editMode, setEditMode] = useState(false);\n  const {\n    children,\n    onDoubleClick,\n    className,\n    defaultText,\n    ...restSpanProps\n  } = spanProps || {};\n  const [localValue, setLocalValue] = useState(restProps.value || \"hello\");\n  const onEnterCallback = () => {\n    // выключить editMode при нажатии Enter // делают студенты\n\n    onEnter === null || onEnter === void 0 ? void 0 : onEnter();\n    setEditMode(false);\n    // onChangeText?.( restProps.value as string || \"hello\" );\n  };\n  const onBlurCallback = e => {\n    // выключить editMode при нажатии за пределами инпута // делают студенты\n\n    onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);\n    setEditMode(false);\n    // onChangeText?.(restProps.value as string);\n  };\n  const onDoubleClickCallBack = e => {\n    // включить editMode при двойном клике // делают студенты\n\n    onDoubleClick === null || onDoubleClick === void 0 ? void 0 : onDoubleClick(e);\n    setEditMode(true);\n  };\n  const spanClassName = s.span + (className ? \" \" + className : \"\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: editMode ? /*#__PURE__*/_jsxDEV(SuperInputText, {\n      autoFocus: autoFocus || true,\n      onBlur: onBlurCallback,\n      onEnter: onEnterCallback,\n      className: s.input,\n      value: restProps.value,\n      ...restProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.spanBlock,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: editIcon,\n        className: s.pen,\n        alt: \"edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        onDoubleClick: onDoubleClickCallBack,\n        className: spanClassName,\n        ...restSpanProps,\n        children: children || restProps.value || defaultText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(SuperEditableSpan, \"lJG54ktx//4+3jz659l1fmqqIbo=\");\n_c = SuperEditableSpan;\nexport default SuperEditableSpan;\nvar _c;\n$RefreshReg$(_c, \"SuperEditableSpan\");","map":{"version":3,"names":["React","useState","s","SuperInputText","editIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","SuperEditableSpan","autoFocus","onBlur","onEnter","spanProps","onChangeText","restProps","_s","editMode","setEditMode","children","onDoubleClick","className","defaultText","restSpanProps","localValue","setLocalValue","value","onEnterCallback","onBlurCallback","e","onDoubleClickCallBack","spanClassName","span","input","fileName","_jsxFileName","lineNumber","columnNumber","spanBlock","src","pen","alt","_c","$RefreshReg$"],"sources":["/Users/anatolisaukhin/hw-02/src/s2-homeworks/hw06/common/c4-SuperEditableSpan/SuperEditableSpan.tsx"],"sourcesContent":["import React, {\n  DetailedHTMLProps,\n  InputHTMLAttributes,\n  HTMLAttributes,\n  useState,\n  KeyboardEvent,\n  useEffect,\n} from \"react\";\nimport s from \"./SuperEditableSpan.module.css\";\nimport SuperInputText from \"../../../hw04/common/c1-SuperInputText/SuperInputText\";\nimport editIcon from \"./editIcon.svg\";\nimport { restoreState, saveState } from \"../../localStorage/localStorage\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<\n  InputHTMLAttributes<HTMLInputElement>,\n  HTMLInputElement\n>;\n// тип пропсов обычного спана\ntype DefaultSpanPropsType = DetailedHTMLProps<\n  HTMLAttributes<HTMLSpanElement>,\n  HTMLSpanElement\n>;\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута, кроме type\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperEditableSpanType = Omit<DefaultInputPropsType, \"type\"> & {\n  // и + ещё пропсы которых нет в стандартном инпуте\n  onChangeText?: (value: string) => void;\n  onEnter?: () => void;\n  error?: string;\n  spanProps?: DefaultSpanPropsType & { defaultText?: string }; // пропсы для спана\n};\n\nconst SuperEditableSpan: React.FC<SuperEditableSpanType> = ({\n  autoFocus,\n  onBlur,\n  onEnter,\n  spanProps,\n  onChangeText,\n  ...restProps // все остальные пропсы попадут в объект restProps\n}) => {\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const { children, onDoubleClick, className, defaultText, ...restSpanProps } =\n    spanProps || {};\n\n    const [localValue, setLocalValue] = useState(restProps.value || \"hello\");\n\n\n  const onEnterCallback = () => {\n    // выключить editMode при нажатии Enter // делают студенты\n\n    onEnter?.();\n    setEditMode(false);\n    // onChangeText?.( restProps.value as string || \"hello\" );\n\n\n  };\n  const onBlurCallback = (e: React.FocusEvent<HTMLInputElement>) => {\n    // выключить editMode при нажатии за пределами инпута // делают студенты\n\n    onBlur?.(e);\n    setEditMode(false);\n    // onChangeText?.(restProps.value as string);\n\n  };\n  const onDoubleClickCallBack = (\n    e: React.MouseEvent<HTMLSpanElement, MouseEvent>\n  ) => {\n    // включить editMode при двойном клике // делают студенты\n\n    onDoubleClick?.(e);\n    setEditMode(true);\n  };\n\n  const spanClassName = s.span + (className ? \" \" + className : \"\");\n\n  return (\n    <>\n      {editMode ? (\n        <SuperInputText\n          autoFocus={autoFocus || true}\n          onBlur={onBlurCallback}\n          onEnter={onEnterCallback}\n          className={s.input}\n          value={restProps.value}\n          {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n        />\n      ) : (\n        <div className={s.spanBlock}>\n          <img src={editIcon} className={s.pen} alt={\"edit\"} />\n          <span\n            onDoubleClick={onDoubleClickCallBack}\n            className={spanClassName}\n            {...restSpanProps}\n          >\n            {/*если нет захардкодженного текста для спана, то значение инпута*/}\n\n            {children || restProps.value || defaultText}\n            {/* { restProps.value  ? restProps.value  : defaultText} */}\n            {/* { defaultText  ? defaultText : restProps.value } */}\n          </span>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default SuperEditableSpan;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAIVC,QAAQ,QAGH,OAAO;AACd,OAAOC,CAAC,MAAM,gCAAgC;AAC9C,OAAOC,cAAc,MAAM,uDAAuD;AAClF,OAAOC,QAAQ,MAAM,gBAAgB;;AAGrC;;AAKA;;AAMA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AASA,MAAMC,iBAAkD,GAAGA,CAAC;EAC1DC,SAAS;EACTC,MAAM;EACNC,OAAO;EACPC,SAAS;EACTC,YAAY;EACZ,GAAGC,SAAS,CAAC;AACf,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAU,KAAK,CAAC;EACxD,MAAM;IAAEkB,QAAQ;IAAEC,aAAa;IAAEC,SAAS;IAAEC,WAAW;IAAE,GAAGC;EAAc,CAAC,GACzEV,SAAS,IAAI,CAAC,CAAC;EAEf,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGxB,QAAQ,CAACc,SAAS,CAACW,KAAK,IAAI,OAAO,CAAC;EAG1E,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B;;IAEAf,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAG,CAAC;IACXM,WAAW,CAAC,KAAK,CAAC;IAClB;EAGF,CAAC;EACD,MAAMU,cAAc,GAAIC,CAAqC,IAAK;IAChE;;IAEAlB,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAGkB,CAAC,CAAC;IACXX,WAAW,CAAC,KAAK,CAAC;IAClB;EAEF,CAAC;EACD,MAAMY,qBAAqB,GACzBD,CAAgD,IAC7C;IACH;;IAEAT,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAGS,CAAC,CAAC;IAClBX,WAAW,CAAC,IAAI,CAAC;EACnB,CAAC;EAED,MAAMa,aAAa,GAAG7B,CAAC,CAAC8B,IAAI,IAAIX,SAAS,GAAG,GAAG,GAAGA,SAAS,GAAG,EAAE,CAAC;EAEjE,oBACEf,OAAA,CAAAE,SAAA;IAAAW,QAAA,EACGF,QAAQ,gBACPX,OAAA,CAACH,cAAc;MACbO,SAAS,EAAEA,SAAS,IAAI,IAAK;MAC7BC,MAAM,EAAEiB,cAAe;MACvBhB,OAAO,EAAEe,eAAgB;MACzBN,SAAS,EAAEnB,CAAC,CAAC+B,KAAM;MACnBP,KAAK,EAAEX,SAAS,CAACW,KAAM;MAAA,GACnBX;IAAS;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd,CAAC,gBAEF/B,OAAA;MAAKe,SAAS,EAAEnB,CAAC,CAACoC,SAAU;MAAAnB,QAAA,gBAC1Bb,OAAA;QAAKiC,GAAG,EAAEnC,QAAS;QAACiB,SAAS,EAAEnB,CAAC,CAACsC,GAAI;QAACC,GAAG,EAAE;MAAO;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACrD/B,OAAA;QACEc,aAAa,EAAEU,qBAAsB;QACrCT,SAAS,EAAEU,aAAc;QAAA,GACrBR,aAAa;QAAAJ,QAAA,EAIhBA,QAAQ,IAAIJ,SAAS,CAACW,KAAK,IAAIJ;MAAW;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGvC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ;EACN,gBACD,CAAC;AAEP,CAAC;AAACrB,EAAA,CAxEIP,iBAAkD;AAAAiC,EAAA,GAAlDjC,iBAAkD;AA0ExD,eAAeA,iBAAiB;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}