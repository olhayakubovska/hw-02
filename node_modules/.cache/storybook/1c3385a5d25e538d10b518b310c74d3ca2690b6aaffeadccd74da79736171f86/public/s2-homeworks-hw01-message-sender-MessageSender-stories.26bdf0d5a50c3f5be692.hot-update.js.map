{"version":3,"file":"s2-homeworks-hw01-message-sender-MessageSender-stories.26bdf0d5a50c3f5be692.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AAAA;AAcA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;;AAMA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","sources":["webpack://hws2/./src/s2-homeworks/hw01/HW1.tsx"],"sourcesContent":["import React from \"react\";\nimport Message from \"./message/Message\";\nimport MessageSender from \"./message-sender/MessageSender\";\nimport s2 from \"../../s1-main/App.module.css\";\nimport FriendMessage from \"./friend-message/FriendMessage\";\nimport avatar from \"./avatar.png\";\n\n/*\n * 1 - описать тип MessageType\n * 2 - описать тип MessagePropsType в файле Message.tsx\n * 3 - в файле Message.tsx отобразить приходящие данные\n * 4 - выполнить пункты 2, 3 в файле FriendMessage.tsx\n * 5 - сделать стили в соответствии с дизайном\n * */\n\n// нужно создать правильный тип вместо any\nexport type MessageType = {\n  id: number;\n  user: UserType;\n  message: MessageObjPropType;\n};\n//  avatar: typeof avatar;\n\n type UserType = {\n  avatar: string;\n  // avatar: typeof avatar;\n\n  name: string;\n};\n\nexport type MessageObjPropType = {\n  text: string;\n  time: string;\n};\n\n// структуру объекта не менять\nexport const message0: MessageType = {\n  id: 0,\n  user: {\n    avatar: avatar, // можно менять\n    name: \"Some Name\", // можно менять\n  },\n  message: {\n    text: \"some textsome textsome textsome textsome textsome textsome text\", // можно менять\n    time: \"22:00\", // можно менять\n  },\n};\nexport const friendMessage0: MessageType = {\n  id: 100,\n  user: {\n    avatar: avatar, // можно менять\n    name: \"Friend Name\", // можно менять\n  },\n  message: {\n    text: \"зеркальное сообщение для тренировки css\", // можно менять\n    time: \"22:00\", // можно менять\n  },\n};\n\nconst HW1 = () => {\n  return (\n    <div id={\"hw1\"}>\n      <div className={s2.hwTitle}>Homework #1</div>\n      <div className={s2.hw}>\n        {/*проверка отображения (не менять)*/}\n        <div >\n          <Message message={message0} />\n          <FriendMessage message={friendMessage0} />\n        </div>\n\n        {/*для автоматической проверки дз (не менять)*/}\n        <MessageSender M={Message} />\n      </div>\n    </div>\n  );\n};\n\nexport default HW1;\n\n\n\n\n\n// import React from \"react\";\n// import Message from \"./message/Message\";\n// import MessageSender from \"./message-sender/MessageSender\";\n// import s2 from \"../../s1-main/App.module.css\";\n// import FriendMessage from \"./friend-message/FriendMessage\";\n// import avatar from \"./avatar.png\";\n\n// /*\n//  * 1 - описать тип MessageType\n//  * 2 - описать тип MessagePropsType в файле Message.tsx\n//  * 3 - в файле Message.tsx отобразить приходящие данные\n//  * 4 - выполнить пункты 2, 3 в файле FriendMessage.tsx\n//  * 5 - сделать стили в соответствии с дизайном\n//  * */\n\n// // нужно создать правильный тип вместо any\n// export type MessageType = {\n//   id: number;\n//   user: UserType;\n//   message: MessageObjPropType;\n// };\n// //  avatar: typeof avatar;\n\n//  type UserType = {\n//   avatar: string;\n//   // avatar: typeof avatar;\n\n//   name: string;\n// };\n\n// export type MessageObjPropType = {\n//   text: string;\n//   time: string;\n// };\n\n// // структуру объекта не менять\n// export const message0: MessageType = {\n//   id: 0,\n//   user: {\n//     avatar: avatar, // можно менять\n//     name: \"Some Name\", // можно менять\n//   },\n//   message: {\n//     text: \"some textsome textsome textsome textsome textsome textsome text\", // можно менять\n//     time: \"22:00\", // можно менять\n//   },\n// };\n// export const friendMessage0: MessageType = {\n//   id: 100,\n//   user: {\n//     avatar: avatar, // можно менять\n//     name: \"Friend Name\", // можно менять\n//   },\n//   message: {\n//     text: \"зеркальное сообщение для тренировки css\", // можно менять\n//     time: \"22:00\", // можно менять\n//   },\n// };\n\n// const HW1 = () => {\n//   return (\n//     <div id={\"hw1\"}>\n//       <div className={s2.hwTitle}>Homework #1</div>\n//       <div className={s2.hw}>\n//         {/*проверка отображения (не менять)*/}\n//         <div>\n//           <Message message={message0} />\n//           <FriendMessage message={friendMessage0} />\n//         </div>\n\n//         {/*для автоматической проверки дз (не менять)*/}\n//         <MessageSender M={Message} />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default HW1;\n"],"names":[],"sourceRoot":""}